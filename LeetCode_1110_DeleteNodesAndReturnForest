/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    List<TreeNode> res;
    Set<Integer> to_delete_set = new HashSet<>();
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        res = new ArrayList<>();
        for(int i : to_delete) {
            to_delete_set.add(i);
        }
        
        dfs(root, false);
        
        return res;
    }
    
    private TreeNode dfs(TreeNode node, Boolean hasParent) {
        if(node == null) return null;
        if(!to_delete_set.contains(node.val) && !hasParent) res.add(node);
        node.left = dfs(node.left, !to_delete_set.contains(node.val));
        node.right = dfs(node.right, !to_delete_set.contains(node.val));
        
        return to_delete_set.contains(node.val)? null : node;
    }
}
