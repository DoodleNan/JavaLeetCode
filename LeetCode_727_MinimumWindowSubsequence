class Solution {
    public String minWindow(String S, String T) {
        int m = S.length();
        int n = T.length();
        int start = -1;
        int minLength = Integer.MAX_VALUE;
        int [][]dp = new int[m+1][n+1];
        
        for(int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        
        for(int i = 1; i <=n; i++) {
            dp[0][i] = -1;
        }
        
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(j > i) {
                    dp[i][j] = -1;
                    continue;
                }
                if(S.charAt(i-1) == T.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
            if(dp[i][n] >=0) {
                int length = i - dp[i][n];
                if(minLength > length) {
                    minLength = length;
                    start = dp[i][n];
                } 
            }
        }
        
        return (start != -1) ? S.substring(start, start + minLength) : ""; 
    }
}
