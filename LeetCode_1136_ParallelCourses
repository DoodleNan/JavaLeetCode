class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        int[] indegree = new int[n+1];
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        
        for(int[] relation : relations) {
            graph.get(relation[0]).add(relation[1]);
            indegree[relation[1]]++;
        }
        
        int step = 0;
        int visited = 0;
        List<Integer> bfs = new ArrayList<>();
        for(int node = 1; node < n; node++){
            if(indegree[node] == 0) {
                bfs.add(node);
            }
        }
        
        while(!bfs.isEmpty()) {
            step++;
            List<Integer> nextQueue = new ArrayList<>();
            for(int node : bfs) {
                visited++;
                List<Integer> directs = graph.get(node);
                for(int direct : directs) {
                    indegree[direct]--;
                    if(indegree[direct] == 0) {
                        nextQueue.add(direct);
                    }
                }  
            }
            bfs = nextQueue;
        }
        
        if(visited != n) return -1;
        else return step;
    }
}
