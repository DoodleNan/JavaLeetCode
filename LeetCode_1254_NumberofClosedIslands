class Solution {
    int[] dir = new int[]{1, 0, -1, 0, 1};
    public int closedIsland(int[][] grid) {
        int res = 0;
        int row = grid.length;
        int col = grid[0].length;
        if(row < 3 || col < 3) return res;
        
        boolean[][] visited = new boolean[row][col];
    
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if((i == 0 || j == 0 || i == row - 1 || j == col - 1) && grid[i][j] == 0) {
                    fill(i, j, grid);
                }
            }
        }
        
        for(int i = 1; i < row - 1; i++) {
            for(int j = 1; j < col - 1; j++) {
                if(grid[i][j] == 0 && !visited[i][j]) {
                    dfs(i, j, grid, visited);
                    res++;
                }
            }
        }
        return res;
    }
    
    private void fill(int i, int j, int[][] grid) {
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 1) return;
        grid[i][j] = 1;
        for(int index = 0; index < 4; index++) {
            fill(i+dir[index], j+dir[index+1], grid);
        }
    }
    private void dfs(int i, int j, int[][] grid, boolean[][] visited) {
        for(int index = 0; index < 4; index++) {
            int row = i + dir[index];
            int col = j + dir[index+1];
            if(row > 0 && row < grid.length && col > 0 && col < grid[0].length && grid[row][col] == 0 && !visited[row][col]) {
                visited[row][col] = true;
                dfs(row, col, grid, visited);
            }
        }
    }
}
