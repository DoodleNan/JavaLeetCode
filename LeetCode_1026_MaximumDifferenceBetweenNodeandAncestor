/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = Integer.MIN_VALUE;
    public int maxAncestorDiff(TreeNode root) {
        if(root == null) return res;
    
        dfs(root);
        return res;
    }
    
    private int[] dfs(TreeNode root) {
        int[] ret = new int[2];
        ret[0] = ret[1] = root.val;
        
        int min = root.val;
        int max = root.val;
        
        if(root.left != null) {
            int[] left = dfs(root.left);
            min = Math.min(min, left[0]);
            max = Math.max(max, left[1]);
        }
        if(root.right != null) {
            int[] right = dfs(root.right);
            min = Math.min(min, right[0]);
            max = Math.max(max, right[1]);
        }
        
        ret[0] = Math.min(ret[0], min);
        ret[1] = Math.max(ret[1], max);
        res = Math.max(res, Math.max(Math.abs(root.val - min), Math.abs(root.val - max)));
        
        return ret;
    }
}
