/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> res = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        dfs(root, "");
        
        return res;
    }
    
    private void dfs(TreeNode root, String pre) {
        if(root == null) return;
        StringBuilder sb = new StringBuilder(pre);
        sb.append("->");
        sb.append(String.valueOf(root.val));
            
        if(root.left == null && root.right == null) {
            res.add(sb.toString().substring(2));
            return;
        }
        
        if(root.left != null) {
            dfs(root.left, sb.toString());
        }
        
        if(root.right != null) {
            dfs(root.right, sb.toString());
        }
        
        return;
    }
        
}
